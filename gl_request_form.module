<?php

/**
 * @file
 * GL request form module.
 */

function gl_request_form_menu() {
  $items = array();

  $items['gl'] = array(
    'title' => 'GL request form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gl_request_form', menu_get_object()),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function gl_request_form_block_info() {
  $blocks['gl_request_form'] = array(
    'info' => t('GL digital request form'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param  string $delta [description]
 * @return [type]        [description]
 */
function gl_request_form_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'gl_request_form':
      return gl_request_form_block(menu_get_object());
  }

  return $block;
}

/**
 * Returns a block array for use in hook_block_view.
 *
 * @return array
 */
function gl_request_form_block($node) {
  if (empty($node)) {
    return NULL;
  }

  return array(
    'subject' => t('Request'),
    'content' => drupal_get_form('gl_request_form', $node),
  );
}

/**
 * [gl_request_form description]
 * @return [type] [description]
 */
function gl_request_form($form, &$form_state, $node) {
  if (empty($form_state['product_count'])) {
    $form_state['product_count'] = 1;
  }

  $form['#node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#placeholder' => t('Name'),
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#element_validate' => array('gl_request_form_email_element_validate'),
    '#placeholder' => t('Email'),
  );

  $form['products'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="gl-request-form-products-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );

  $values = !empty($form_state['values']['products']['product']) ? $form_state['values']['products']['product'] : array(1 => array());

  // Add an additional item if the add item count has gone up.
  if (count($values) < $form_state['product_count']) {
    //$last = reset(array_keys(array_slice($values, -1, 1, TRUE)));
    $values[] = array();
  }

  $options = gl_request_form_get_form_options($node);

  $form['products']['top'] = array(
    '#markup' => '<table><tbody>',
  );

  foreach (array_keys($values) as $key) {
    $form['products']['product'][$key] = array(
      'product' => array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($values[$key]['product']) ? $values[$key]['product'] : NULL,
        '#prefix' => '<tr class="row-' . $key . '"><td>',
        '#suffix' => '</td>',
      ),
      'quantity' => array(
        '#type' => 'textfield',
        //'#element_validate' => array('gl_request_form_quantity_element_validate'),
        '#default_value' => isset($values[$key]['quantity']) ? $values[$key]['quantity'] : NULL,
        '#prefix' => '<td>',
        '#suffix' => '</td>',
      ),
    );
    if (($form_state['product_count'] > 1) || (count($values) > 1)) {
      $form['products']['product'][$key]['remove-' . $key] = array(
        '#type' => 'submit',
        '#value' => t('remove'),
        '#id' => 'gl-request-form-remove-' . $key,
        '#name' => 'op_' . $key,
        '#submit' => array('gl_request_form_remove_one'),
        '#ajax' => array(
          'callback' => 'gl_request_form_ajax_callback',
          'wrapper' => 'gl-request-form-products-wrapper',
        ),
        '#number' => $key,
        '#prefix' => '<td>',
        '#suffix' => '</td></tr>',
      );
    }
  }

  $form['products']['bottom'] = array(
    '#markup' => '</tbody></table>',
  );

  $form['add_another'] = array(
    '#type' => 'submit',
    '#value' => t('add another'),
    '#submit' => array('gl_request_form_add_one'),
    '#ajax' => array(
      'callback' => 'gl_request_form_ajax_callback',
      'wrapper' => 'gl-request-form-products-wrapper',
    ),
    '#prefix' => '<div id="gl-request-form-add">',
    '#suffix' => '</div>',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
  );

  return $form;
}

/**
 *
 */
function gl_request_form_ajax_callback($form, $form_state) {
  return $form['products'];
}

/**
 * Increments the product counter and causes a rebuild.
 */
function gl_request_form_add_one($form, &$form_state) {
  $form_state['product_count']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Decrements the product counter, removes submitted values and causes a rebuild.
 */
function gl_request_form_remove_one($form, &$form_state) {
  if (!empty($form_state['triggering_element']['#number'])) {
    $number = $form_state['triggering_element']['#number'];
    $form_state['product_count']--;
    $form_state['rebuild'] = TRUE;
    unset($form_state['values']['products']['product'][$number]);
  }
}

/**
 * [gl_request_form_email_element_validate description]
 */
function gl_request_form_email_element_validate($element, &$form_state, $form) {
  if (empty($form_state['triggering_element']['#ajax']) && !preg_match('/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i', $element['#value'])) {
    form_error($element, t('Please eneter a valid email address.'));
  }
}

/**
 * [gl_request_form_quantity_element_validate description]
 */
function gl_request_form_quantity_element_validate($element, &$form_state, $form) {
  if ((int) $element['#value'] != $element['#value']) {
    form_error($element, t('Please enter a valid quantity.'));
  }
}

/**
 * Builds an array of available select form options.
 *
 * @todo Replace this will (probably) an EFQ to get what we need.
 *
 * @param $node
 *
 * @return array
 */
function gl_request_form_get_form_options($node) {
  return array(
    1 => 'One',
    2 => 'Two',
    3 => 'Three',
  );
}
