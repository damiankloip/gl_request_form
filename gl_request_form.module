<?php

/**
 * @file
 * GL request form module.
 */

/**
 * Implements hook_menu().
 */
function gl_request_form_menu() {
  $items = array();

  $items['gl'] = array(
    'title' => 'GL request form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gl_request_form', menu_get_object()),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );

  $items['admin/gl'] = array(
    'title' => 'GL request form settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gl_request_form_admin_form'),
    'access arguments' => array('administer gl request form'),
    'file' => 'gl_request_form.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function gl_request_form_permission() {
  return array(
    'administer gl request form' => array(
      'title' => t('Administer GL request form settings'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function gl_request_form_block_info() {
  $blocks['gl_request_form'] = array(
    'info' => t('GL digital request form'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function gl_request_form_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'gl_request_form':
      return gl_request_form_block(menu_get_object());
  }

  return $block;
}

/**
 * Returns a block array for use in hook_block_view.
 *
 * @return array
 */
function gl_request_form_block($node) {
  if (empty($node)) {
    return NULL;
  }

  return array(
    'subject' => t('Request'),
    'content' => drupal_get_form('gl_request_form', $node),
  );
}

/**
 * Request form callback.
 */
function gl_request_form($form, &$form_state, $node) {
  if (empty($form_state['product_count'])) {
    $form_state['product_count'] = 1;
  }

  $form['#node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#placeholder' => t('Name'),
    '#element_validate' => array('gl_request_form_name_element_validate'),
  );

  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#element_validate' => array('gl_request_form_mail_element_validate'),
    '#placeholder' => t('Email'),
  );

  $form['products'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="gl-request-form-products-wrapper">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );

  // Get the array of product values that have been input, or create a mock
  // default starting at key 1 for the sake of the logic below.
  $values = !empty($form_state['values']['products']['product']) ? $form_state['values']['products']['product'] : array(1 => array());

  // Add an additional item if the add item count has gone up.
  if (count($values) < $form_state['product_count']) {
    //$last = reset(array_keys(array_slice($values, -1, 1, TRUE)));
    $values[] = array();
  }

  $options = gl_request_form_form_options($node);

  $form['products']['top'] = array(
    '#markup' => '<table><tbody>',
  );

  foreach (array_keys($values) as $key) {
    $form['products']['product'][$key] = array(
      'product' => array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => isset($values[$key]['product']) ? $values[$key]['product'] : NULL,
        '#prefix' => '<tr class="row-' . $key . '"><td>',
        '#suffix' => '</td>',
      ),
      'quantity' => array(
        '#type' => 'textfield',
        '#element_validate' => array('gl_request_form_quantity_element_validate'),
        '#default_value' => isset($values[$key]['quantity']) ? $values[$key]['quantity'] : NULL,
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        '#size' => '5',
      ),
    );
    if (($form_state['product_count'] > 1) || (count($values) > 1)) {
      $form['products']['product'][$key]['remove-' . $key] = array(
        '#type' => 'submit',
        '#value' => t('remove'),
        '#id' => 'gl-request-form-remove-' . $key,
        '#name' => 'op_' . $key,
        '#submit' => array('gl_request_form_remove_one'),
        '#ajax' => array(
          'callback' => 'gl_request_form_ajax_callback',
          'wrapper' => 'gl-request-form-products-wrapper',
        ),
        '#number' => $key,
        '#prefix' => '<td>',
        '#suffix' => '</td></tr>',
      );
    }
  }

  $form['products']['bottom'] = array(
    '#markup' => '</tbody></table>',
  );

  $form['add_another'] = array(
    '#type' => 'submit',
    '#value' => t('add another'),
    '#submit' => array('gl_request_form_add_one'),
    '#ajax' => array(
      'callback' => 'gl_request_form_ajax_callback',
      'wrapper' => 'gl-request-form-products-wrapper',
    ),
    '#prefix' => '<div id="gl-request-form-add">',
    '#suffix' => '</div>',
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
  );

  return $form;
}

/**
 * Validation handler for gl_request_form.
 */
function gl_request_form_validate($form, &$form_state) {
  // At the moment all validation is handled by individual element_validate
  // callbacks.
}

/**
 * Submit handler for gl_request_form.
 */
function gl_request_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);

  // Send off the emails. If this is successful, set a message.
  if (gl_request_form_send_mail($form_state['values'])) {
    drupal_set_message(t('Thank you. Your request has been sent.'));
  }
}

/**
 *
 */
function gl_request_form_ajax_callback($form, $form_state) {
  return $form['products'];
}

/**
 * Increments the product counter and causes a rebuild.
 */
function gl_request_form_add_one($form, &$form_state) {
  $form_state['product_count']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Decrements the product counter, removes submitted values and causes a rebuild.
 */
function gl_request_form_remove_one($form, &$form_state) {
  if (!empty($form_state['triggering_element']['#number'])) {
    $number = $form_state['triggering_element']['#number'];
    $form_state['product_count']--;
    $form_state['rebuild'] = TRUE;
    unset($form_state['values']['products']['product'][$number]);
  }
}

/**
 * Element validation callback for name field.
 *
 * Using this so we can deal with the element being required and the ajax
 * reloading of the form.
 */
function gl_request_form_name_element_validate($element, &$form_state, $form) {
  if (empty($form_state['triggering_element']['#ajax']) && empty($element['#value'])) {
    form_error($element, t('Please enter your name.'));
  }
}

/**
 * Element validation callback for email field.
 *
 * Using this so we can deal with the element being required and the ajax
 * reloading of the form.
 */
function gl_request_form_mail_element_validate($element, &$form_state, $form) {
  if (empty($form_state['triggering_element']['#ajax']) && !preg_match('/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}$/i', $element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
}

/**
 * [gl_request_form_quantity_element_validate description]
 */
function gl_request_form_quantity_element_validate($element, &$form_state, $form) {
  if (empty($form_state['triggering_element']['#ajax']) && empty($element['#value'])) {
    form_error($element, t('Please enter a quantity or descirption.'));
  }
}

/**
 * Wrapper/helper for sending emails.
 *
 * @param array $params
 *
 * @return bool
 *   Returns TRUE if atleast 1 email was sent correctly, FALSE otherwise.
 */
function gl_request_form_send_mail(array $params) {
  $admins = explode(',', variable_get('gl_request_form_admin_mail', ''));
  $from = gl_request_form_mail_from();

  $params['subject'] = t('Product request submission from @name (@mail)', array('@name' => $params['name'], '@mail' => $params['mail']));
  $params['body'] = _gl_request_form_prepare_mail_body($params);

  // We are expecting $sent to come out TRUE, even if some fail for some reason
  // we will show the success message if it shows success for atleast 1 recipient.
  $sent = FALSE;

  if (!empty($admins)) {
    foreach ($admins as $admin) {
      // Email each admin account.
      $mail = drupal_mail('gl_request_form', 'gl_request_form', $admin, language_default(), $params, $from);

      if ($mail['result']) {
        $sent = TRUE;
        watchdog('gl_request_form', 'Email sent to @mail', array('@mail' => $admin), WATCHDOG_INFO);
      }
      else {
        watchdog('gl_request_form', 'Email not sent to @mail', array('@mail' => $admin), WATCHDOG_ERROR);
      }
    }
  }

  return $sent;
}

/**
 * Helper to return the set gl_request_form from address, or the site address if
 * it doesn't exist.
 *
 * @return string
 */
function gl_request_form_mail_from() {
  return variable_get('gl_request_form_mail_from', variable_get('site_mail', ''));
}

/**
 * Implements hook_mail().
 */
function gl_request_form_mail($key, &$message, $params) {
  if ($key == 'gl_request_form') {
    // Modify the message.
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Prepare the mail body array from the products array.
 *
 * @param array $params
 *
 * @return array
 *   An array of prepared markup, by line.
 */
function _gl_request_form_prepare_mail_body(array $params) {
  $body = array();

  $body[] = '<h1>' . t('Digital product request.') . '</h1>';

  $body[] = '<p>' . t('Name: @name', array('@name' => $params['name'])) . '</p>';
  $body[] = '<p>' . t('Email address: @mail', array('@mail' => $params['mail'])) . '</p>';

  $rows = array();
  foreach ($params['products']['product'] as $product) {
    $rows[] = array(
      check_plain($product['product']),
      check_plain($product['quantity']),
    );
  }

  $body[] = theme('table', array('rows' => $rows, 'header' => array(t('Product'), t('Quantity'))));

  return $body;
}

/**
 * Builds an array of available select form options.
 *
 * @todo Replace this will (probably) an EFQ to get what we need.
 *
 * @param $node
 *
 * @return array
 */
function gl_request_form_form_options($node) {
  $options = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'selling_line');
  // Check these field names!
  $query->fieldCondition('field_digital_product', 'value', TRUE);
  $result = $query->execute();

  if (!empty($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));

    foreach ($nodes as $node) {
      $label = check_plain($node->title);
      if ($items = field_get_items('node', $node, 'field_isbn')) {
        $first = reset($items);
        $label .= ' (' . $first['safe_value'] . ')';
      }

      $options[$node->nid] = $label;
    }
  }

  return $options;
}
